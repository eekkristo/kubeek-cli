name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "SemVer tag to release (e.g. v1.2.3 or v1.2.3-rc.1)"
        required: true
        type: string

permissions:
  contents: write   # needed to create tags + releases

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Cache Go
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      # Create & push the tag from CI
      - name: Create tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.event.inputs.version }}"
          if [[ ! "$TAG" =~ ^v[0-9]+(\.[0-9]+){2}(-[0-9A-Za-z\.-]+)?$ ]]; then
            echo "Tag must look like v1.2.3 (or v1.2.3-rc.1). Got: $TAG"
            exit 1
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create an annotated tag on the current commit
          git tag -a "$TAG" -m "Release $TAG" "${GITHUB_SHA}"
          git push origin "$TAG"

      # Pull the matching section from CHANGELOG.md to use as release notes
      - name: Prepare release notes from CHANGELOG.md
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.event.inputs.version }}"
          NOTES_FILE="$RUNNER_TEMP/RELEASE_NOTES.md"

          if [[ -f CHANGELOG.md ]]; then
            awk -v tag="$TAG" '
              BEGIN { insec=0 }
              /^##[[:space:]]/ {
                if (insec) exit
                if ($0 ~ "^##[[:space:]]*\\[" tag "\\]" || $0 ~ "^##[[:space:]]*" tag) { insec=1; next }
              }
              insec { print }
            ' CHANGELOG.md > "$NOTES_FILE" || true
            sed -i '1{/^[[:space:]]*$/d;}' "$NOTES_FILE" || true
            if [[ -s "$NOTES_FILE" ]]; then
              echo "RELEASE_NOTES=$NOTES_FILE" >> $GITHUB_ENV
            fi
          fi

      - name: Decide GoReleaser args
        shell: bash
        run: |
          if [[ -n "${RELEASE_NOTES:-}" ]]; then
            echo "GORELEASER_ARGS=release --clean --release-notes=${RELEASE_NOTES}" >> $GITHUB_ENV
          else
            echo "GORELEASER_ARGS=release --clean" >> $GITHUB_ENV
          fi

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: ${{ env.GORELEASER_ARGS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
